/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eaglebank.api.generated.api;

import com.eaglebank.api.generated.model.BadRequestErrorResponse;
import com.eaglebank.api.generated.model.CreateUserRequest;
import com.eaglebank.api.generated.model.ErrorResponse;
import com.eaglebank.api.generated.model.UpdateUserRequest;
import com.eaglebank.api.generated.model.UserResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-06T13:05:12.066616+01:00[Europe/London]")
@Validated
public interface UserApi {

    /**
     * POST /v1/users
     * Create a new user
     *
     * @param createUserRequest Create a new user (required)
     * @return User has been created successfully (status code 201)
     *         or Invalid details supplied (status code 400)
     *         or An unexpected error occurred (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UserResponse> createUser(
         @Valid @RequestBody CreateUserRequest createUserRequest
    );


    /**
     * DELETE /v1/users/{userId}
     * Delete user by ID.
     *
     * @param userId ID of the user (required)
     * @return The user has been deleted (status code 204)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or User was not found (status code 404)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to access the transaction (status code 403)
     *         or A user cannot be deleted when they are associated with a bank account (status code 409)
     *         or An unexpected error occurred (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/users/{userId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteUserByID(
        @Pattern(regexp = "^usr-[A-Za-z0-9]+$")  @PathVariable("userId") String userId
    );


    /**
     * GET /v1/users/{userId}
     * Fetch user by ID.
     *
     * @param userId ID of the user (required)
     * @return The user details (status code 200)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to access the transaction (status code 403)
     *         or User was not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users/{userId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<UserResponse> fetchUserByID(
        @Pattern(regexp = "^usr-[A-Za-z0-9]+$")  @PathVariable("userId") String userId
    );


    /**
     * PATCH /v1/users/{userId}
     * Update user by ID.
     *
     * @param userId ID of the user (required)
     * @param updateUserRequest Update user details (required)
     * @return The updated user details (status code 200)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to access the transaction (status code 403)
     *         or User was not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/users/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UserResponse> updateUserByID(
        @Pattern(regexp = "^usr-[A-Za-z0-9]+$")  @PathVariable("userId") String userId,
         @Valid @RequestBody UpdateUserRequest updateUserRequest
    );

}
