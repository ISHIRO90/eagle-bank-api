/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eaglebank.api.generated.api;

import com.eaglebank.api.generated.model.BadRequestErrorResponse;
import com.eaglebank.api.generated.model.BankAccountResponse;
import com.eaglebank.api.generated.model.CreateBankAccountRequest;
import com.eaglebank.api.generated.model.ErrorResponse;
import com.eaglebank.api.generated.model.ListBankAccountsResponse;
import com.eaglebank.api.generated.model.UpdateBankAccountRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-06T13:05:12.066616+01:00[Europe/London]")
@Validated
public interface AccountApi {

    /**
     * POST /v1/accounts
     * Create a new bank account
     *
     * @param createBankAccountRequest Create a new bank account for the user (required)
     * @return Bank Account has been created successfully (status code 201)
     *         or Invalid details supplied (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to access the transaction (status code 403)
     *         or An unexpected error occurred (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<BankAccountResponse> createAccount(
         @Valid @RequestBody CreateBankAccountRequest createBankAccountRequest
    );


    /**
     * DELETE /v1/accounts/{accountNumber}
     * Delete account by account number.
     *
     * @param accountNumber Account number of the bank account (required)
     * @return The bank account has been deleted (status code 204)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to delete the bank account details (status code 403)
     *         or Bank account was not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/accounts/{accountNumber}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteAccountByAccountNumber(
        @Pattern(regexp = "^01\\d{6}$")  @PathVariable("accountNumber") String accountNumber
    );


    /**
     * GET /v1/accounts/{accountNumber}
     * Fetch account by account number.
     *
     * @param accountNumber Account number of the bank account (required)
     * @return The bank account details (status code 200)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or The user was not authenticated (status code 401)
     *         or The user is not allowed to access the bank account details (status code 403)
     *         or Bank account was not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/accounts/{accountNumber}",
        produces = { "application/json" }
    )
    
    ResponseEntity<BankAccountResponse> fetchAccountByAccountNumber(
        @Pattern(regexp = "^01\\d{6}$")  @PathVariable("accountNumber") String accountNumber
    );


    /**
     * GET /v1/accounts
     * List accounts
     *
     * @return The list of bank accounts (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or An unexpected error occurred (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/accounts",
        produces = { "application/json" }
    )
    
    ResponseEntity<ListBankAccountsResponse> listAccounts(
        
    );


    /**
     * PATCH /v1/accounts/{accountNumber}
     * Update account by account number.
     *
     * @param accountNumber Account number of the bank account (required)
     * @param updateBankAccountRequest Update bank account details for the user (required)
     * @return The updated bank account details (status code 200)
     *         or The request didn&#39;t supply all the necessary data (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or The user is not allowed to update the bank account details (status code 403)
     *         or Bank account was not found (status code 404)
     *         or An unexpected error occurred (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/accounts/{accountNumber}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<BankAccountResponse> updateAccountByAccountNumber(
        @Pattern(regexp = "^01\\d{6}$")  @PathVariable("accountNumber") String accountNumber,
         @Valid @RequestBody UpdateBankAccountRequest updateBankAccountRequest
    );

}
